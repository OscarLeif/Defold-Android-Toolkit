local KEYCODE_BUTTON_A = 96
local KEYCODE_BUTTON_B = 97
local KEYCODE_BUTTON_Y = 100

-- Table to track button states
local button_states = {
    current = {},
    previous = {},
}


-- Function to update button states
local function update_button_states()
    -- Loop over all the buttons you want to track (e.g., key codes for gamepad buttons)
    local buttons = { KEYCODE_BUTTON_A, KEYCODE_BUTTON_B } -- Replace with actual key codes

    for _, key_code in ipairs(buttons) do
        -- Store the current state of the button
        button_states.previous[key_code] = button_states.current[key_code] or false
        button_states.current[key_code] = androidnative.is_button_pressed(key_code)
    end
end

-- Function to check if a button was pressed this frame
local function was_button_pressed_this_frame(key_code)
    return button_states.current[key_code] and not button_states.previous[key_code]
end

-- Function to check if a button was released this frame
local function was_button_released_this_frame(key_code)
    return not button_states.current[key_code] and button_states.previous[key_code]
end

function init(self)
    --local res = androidnative.dostuff()
    msg.post(".", "acquire_input_focus")
    -- local native_examep = require "native_example"
    -- native_examep.initilize()
    local sys_info = sys.get_sys_info()

    if sys_info.system_name == "Android" then
        if androidnative ~= nil then

        end
    end
end

local function set_text(text)
    gui.set_text(gui.get_node("text1"), "Android says: \n" .. text)
end

--androidnative.show_toast("Hello from C++!")

function on_input(self, action_id, action)
    if action_id == hash("touch") and androidnative ~= nil then
        if gui.pick_node(gui.get_node("bn_vibrate"), action.x, action.y) then
            androidnative.vibrate(1000)
            androidnative.initialize()
            set_text("Vibrate!")
        elseif gui.pick_node(gui.get_node("bn_resource"), action.x, action.y) then
            local res = androidnative.getraw()
            set_text(tostring(res))
        elseif gui.pick_node(gui.get_node("bn_jar"), action.x, action.y) then
            set_text(androidnative.dostuff_jar())
        elseif gui.pick_node(gui.get_node("bn_java"), action.x, action.y) then
            set_text(androidnative.dostuff_java())
        elseif gui.pick_node(gui.get_node("bn_lib"), action.x, action.y) then
            local a = 10.0
            local b = 4.2
            local s = string.format("%f * %f == %f", a, b, androidnative.multiply(a, b))
            set_text(s)
        elseif gui.pick_node(gui.get_node("bn_toast"), action.x, action.y) then
            print("Toast bt")
            androidnative.show_toast("Hello from C++!")
        elseif gui.pick_node(gui.get_node("bn_portrait"), action.x, action.y) then
            androidnative.set_orientation("portraitSensor")
        elseif gui.pick_node(gui.get_node("bn_landscape"), action.x, action.y) then
            androidnative.set_orientation("landscapeSensor")
        end
    end
end

local A_pressed = false

function update(dt)
    -- Check if the androidnative module exists
    if androidnative ~= nil then
        -- Check key events
        local keycode, action = androidnative.get_latest_key_event()
        if keycode then
            print("LUA Key pressed:", keycode, "Action:", action)
        end

        -- Check axis events (for joystick/gamepad axes)
        local axis_x, axis_y, hat_x, hat_y = androidnative.get_latest_axis_event()
        if axis_x and math.abs(axis_x)> 0 and math.abs(axis_y) > 0 then            
            print("LUA Joystick Axis X:", axis_x, "Y:", axis_y)
            print("LUA Hat Switch X:", hat_x, "Y:", hat_y)
        end
    end
end
